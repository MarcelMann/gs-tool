<gs-algorithms>
	<algorithm name="APSP" class="org.miv.graphstream.algorithm.APSP" category="default">
		<description>
This class defines algorithms that compute all shortest paths lengths 
between all pair of nodes in a given graph. 
This algorithm uses the Floyd-Warshal algorithm, that effectively runs
in O(n^3). This may seems a very large complexity, however this algorithm 
may perform better than running several Dijkstra on all node pairs of 
the graph when the graph becomes dense.</description>
		<parameter name="weightAttributeName" type="java.lang.String"/>
		<parameter name="directed" type="boolean"/>
	</algorithm>
	<algorithm name="AStar" class="org.miv.graphstream.algorithm.AStar" category="default">
		<description>
A* computes the shortest path from a node to another in a graph.
It can eventually fail if the two nodes are in two distinct connected
components.	
		</description>
		<parameter name="source" type="org.miv.graphstream.graph.Node"/>
		<parameter name="target" type="org.miv.graphstream.graph.Node"/>
	</algorithm>
	<algorithm name="BellmanFord" class="org.miv.graphstream.algorithm.BellmanFord" category="default">
		<description>
The BellmanFord algorithm computes single-source shortest paths in a
weighted digraph (where some of the edge weights may be negative). Dijkstra's
algorithm accomplishes the same problem with a lower running time, but
requires edge weights to be non-negative. Thus, BellmanFord is usually used
only when there are negative edge weights.
		</description>
		<parameter name="attribute" type="java.lang.String"/>
		<parameter name="source" type="java.lang.String"/>
	</algorithm>
	<algorithm name="WelshPowell" class="org.miv.graphstream.algorithm.coloring.WelshPowell" category="coloring">
		<description>
This class is intended to give some algorithm for computing the well-known
coloring problem. It provides the Welsh and Powell greedy algorithm that may
used as a static method.
		</description>
		<parameter name="modify" type="boolean"/>
		<parameter name="attribute" type="java.lang.String"/>
	</algorithm>
	<algorithm name="RandomGenerator" class="org.miv.graphstream.algorithm.generator.RandomGenerator" category="generator">
		<description>
This generator creates random graphs of any size. Calling
begin(Graph) put one unique node in the graph, then
nextElement() will add a new node each time it is called and
connect this node randomly to others.
		</description>
		<parameter name="averageDegree" type="int"/>
		<parameter name="directed" type="boolean"/>
		<parameter name="randomlyDirectedEdges" type="boolean"/>
	</algorithm>
	<algorithm name="GraphNervousness" class="org.miv.graphstream.algorithm.measure.GraphNervousness" category="measure">
		<description>
The graph nervousness is a measure that give for each step of a dynamic graph a ratio
between the number of structural events ( addition and removal of nodes and edges) and the number
of elements (nodes and edges) in the graph.

This measure is different from the Element Nervousness even different from the average element
nervousness.
		</description>
	</algorithm>
</gs-algorithms>
